# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Python.gitlab-ci.yml

# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: python:latest

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/topics/caching/
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - venv/

stages:
- test
- deploy

before_script:
  - python --version ; pip --version  # For debugging
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate

test:
  stage: test
  script:
    - pip install ruff tox  # you can also use tox
    # - pip install --editable ".[test]"
    - tox -p all


sast:
  stage: test
include:
- template: Security/SAST.gitlab-ci.yml

# run:
#   script:
#     - pip install .
#     # run the command here
#   artifacts:
#     paths:
#       - build/*

# pages:
#   script:
#     - pip install sphinx sphinx-rtd-theme
#     - cd doc
#     - make html
#     - mv build/html/ ../public/
#   artifacts:
#     paths:
#       - public
#   rules:
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

deploy:
  stage: deploy
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /^v\d+\.\d+\.\d+/
  script: 
    - mkdir /ca
    - git -c http.sslVerify=false clone https://gitlab-ci-token:${CI_JOB_TOKEN}@git.vertices.tech/infrastructure/certificates /ca
    - pip install build twine
    - python -m build
    - TWINE_PASSWORD=${CI_JOB_TOKEN} CURL_CA_BUNDLE="" TWINE_USERNAME=gitlab-ci-token python -m twine upload 
      --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/* 
      --cert /ca/root/vertices_root_certification_authority.pem
      --verbose

  environment: production

